generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model user {
  user_id      Int            @id @default(autoincrement())
  username     String
  email        String         @unique
  password     String
  avatar       String?
  balance      Int            @default(5000)
  job          job[]
  job_labeller job_labeller[]
  image_label  image_label[]
  deleted_jobs deleted_jobs[]
}

model job {
  job_id                  Int             @id @default(autoincrement())
  title                   String
  created_at              DateTime        @default(now())
  description             String
  credits                 Int
  labellers_per_partition Int
  status                  String          @default("active")
  results                 String?
  job_owner_id            Int
  job_owner               user            @relation(fields: [job_owner_id], references: [user_id])
  job_labeller            job_labeller[]
  job_label               job_label[]
  job_partition           job_partition[]
  deleted_jobs            deleted_jobs[]
}

model job_labeller {
  job_id        Int
  job           job           @relation(fields: [job_id], references: [job_id])
  user_id       Int
  user          user          @relation(fields: [user_id], references: [user_id])
  partition_id  Int
  job_partition job_partition @relation(fields: [partition_id], references: [partition_id])
  is_complete   Boolean       @default(false)

  @@id([job_id, user_id, partition_id])
}

model job_label {
  label_id Int    @id @default(autoincrement())
  label    String
  job_id   Int
  job      job    @relation(fields: [job_id], references: [job_id])
}

model job_image {
  image_id      Int           @id @default(autoincrement())
  image_uri     String
  partition_id  Int
  job_partition job_partition @relation(fields: [partition_id], references: [partition_id])
  image_label   image_label[]
}

model image_label {
  label     String
  user_id   Int
  user      user      @relation(fields: [user_id], references: [user_id])
  image_id  Int
  job_image job_image @relation(fields: [image_id], references: [image_id])

  @@id([user_id, image_id])
}

model job_partition {
  partition_id     Int            @id @default(autoincrement())
  partition_number Int
  is_full          Boolean        @default(false)
  is_complete      Boolean        @default(false)
  complete_counter Int            @default(0)
  job_id           Int
  job              job            @relation(fields: [job_id], references: [job_id])
  job_labeller     job_labeller[]
  job_image        job_image[]
}

model deleted_jobs {
  user_id Int
  job_id  Int
  user    user @relation(fields: [user_id], references: [user_id])
  job     job  @relation(fields: [job_id], references: [job_id])

  @@id([user_id, job_id])
}
